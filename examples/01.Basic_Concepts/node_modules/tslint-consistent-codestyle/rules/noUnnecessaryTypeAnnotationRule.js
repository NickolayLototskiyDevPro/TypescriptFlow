"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ts = require("typescript");
var Lint = require("tslint");
var tsutils_1 = require("tsutils");
var CHECK_RETURN_TYPE_OPTION = 'check-return-type';
var FAIL_MESSAGE = "type annotation is redundant";
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        return this.applyWithFunction(sourceFile, walk, {
            checkReturnType: this.ruleArguments.indexOf(CHECK_RETURN_TYPE_OPTION) !== -1,
        }, program.getTypeChecker());
    };
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
function walk(ctx, checker) {
    return ts.forEachChild(ctx.sourceFile, function cb(node) {
        switch (node.kind) {
            case ts.SyntaxKind.ArrowFunction:
            case ts.SyntaxKind.FunctionExpression:
                checkFunction(node);
                break;
            case ts.SyntaxKind.MethodDeclaration:
                if (node.parent.kind === ts.SyntaxKind.ObjectLiteralExpression)
                    checkObjectLiteralMethod(node);
                break;
            case ts.SyntaxKind.VariableDeclarationList:
                checkVariables(node);
        }
        return ts.forEachChild(node, cb);
    });
    function checkFunction(node) {
        if (!functionHasTypeDeclarations(node))
            return;
        var iife = getIife(node);
        if (iife !== undefined)
            return checkIife(node, iife);
        var type = getContextualTypeOfFunction(node);
        if (type === undefined)
            return;
        checkContextSensitiveFunctionOrMethod(node, type);
    }
    function checkObjectLiteralMethod(node) {
        if (!functionHasTypeDeclarations(node))
            return;
        var type = getContextualTypeOfObjectLiteralMethod(node);
        if (type === undefined)
            return;
        checkContextSensitiveFunctionOrMethod(node, type);
    }
    function checkContextSensitiveFunctionOrMethod(node, contextualType) {
        var parameters = parametersExceptThis(node.parameters);
        var sig = getMatchingSignature(contextualType, parameters);
        if (sig === undefined)
            return;
        var signature = sig[0], checkReturn = sig[1];
        if (ctx.options.checkReturnType && checkReturn && node.type !== undefined && !signatureHasGenericOrTypePredicateReturn(signature) &&
            typesAreEqual(checker.getTypeFromTypeNode(node.type), signature.getReturnType()))
            fail(node.type);
        var restParameterContext = false;
        var contextualParameterType;
        for (var i = 0; i < parameters.length; ++i) {
            if (!restParameterContext) {
                var context = signature.parameters[i];
                if (context === undefined || context.valueDeclaration === undefined)
                    break;
                if (tsutils_1.isTypeParameter(checker.getTypeAtLocation(context.valueDeclaration)))
                    continue;
                contextualParameterType = checker.getTypeOfSymbolAtLocation(context, node);
                if (context.valueDeclaration.dotDotDotToken !== undefined) {
                    var indexType = contextualParameterType.getNumberIndexType();
                    if (indexType === undefined)
                        break;
                    contextualParameterType = indexType;
                    restParameterContext = true;
                }
            }
            var parameter = parameters[i];
            if (parameter.type === undefined)
                continue;
            var declaredType = void 0;
            if (parameter.dotDotDotToken !== undefined) {
                if (!restParameterContext)
                    break;
                declaredType = checker.getTypeFromTypeNode(parameter.type);
                var indexType = declaredType.getNumberIndexType();
                if (indexType === undefined)
                    break;
                declaredType = indexType;
            }
            else {
                declaredType = checker.getTypeFromTypeNode(parameter.type);
            }
            if (compareParameterTypes(contextualParameterType, declaredType, parameter.questionToken !== undefined || parameter.initializer !== undefined))
                fail(parameter.type);
        }
    }
    function checkIife(func, iife) {
        if (ctx.options.checkReturnType && func.type !== undefined && func.name === undefined &&
            (!tsutils_1.isExpressionValueUsed(iife) ||
                !containsTypeWithFlag(checker.getTypeFromTypeNode(func.type), ts.TypeFlags.Literal) &&
                    checker.getContextualType(iife) !== undefined))
            fail(func.type);
        var parameters = parametersExceptThis(func.parameters);
        var args = iife.arguments;
        var len = Math.min(parameters.length, args.length);
        outer: for (var i = 0; i < len; ++i) {
            var parameter = parameters[i];
            if (parameter.type === undefined)
                continue;
            var declaredType = checker.getTypeFromTypeNode(parameter.type);
            var contextualType = checker.getBaseTypeOfLiteralType(checker.getTypeAtLocation(args[i]));
            if (parameter.dotDotDotToken !== undefined) {
                var indexType = declaredType.getNumberIndexType();
                if (indexType === undefined || !typesAreEqual(indexType, contextualType))
                    break;
                for (var j = i + 1; j < args.length; ++j)
                    if (!typesAreEqual(contextualType, checker.getBaseTypeOfLiteralType(checker.getTypeAtLocation(args[j]))))
                        break outer;
                fail(parameter.type);
            }
            else if (compareParameterTypes(contextualType, declaredType, parameter.questionToken !== undefined || parameter.initializer !== undefined)) {
                fail(parameter.type);
            }
        }
    }
    function checkVariables(list) {
        var isConst = tsutils_1.getVariableDeclarationKind(list) === 2;
        for (var _i = 0, _a = list.declarations; _i < _a.length; _i++) {
            var variable = _a[_i];
            if (variable.type === undefined || variable.initializer === undefined)
                continue;
            var inferred = checker.getTypeAtLocation(variable.initializer);
            if (!isConst)
                inferred = checker.getBaseTypeOfLiteralType(inferred);
            var declared = checker.getTypeFromTypeNode(variable.type);
            if (typesAreEqual(declared, inferred) || isConst && typesAreEqual(declared, checker.getBaseTypeOfLiteralType(inferred)))
                fail(variable.type);
        }
    }
    function fail(type) {
        ctx.addFailure(type.pos - 1, type.end, FAIL_MESSAGE, Lint.Replacement.deleteFromTo(type.pos - 1, type.end));
    }
    function typesAreEqual(a, b) {
        return a === b || checker.typeToString(a) === checker.typeToString(b);
    }
    function getContextualTypeOfFunction(func) {
        var type = checker.getContextualType(func);
        return type && checker.getApparentType(type);
    }
    function getContextualTypeOfObjectLiteralMethod(method) {
        var type = checker.getContextualType(method.parent);
        if (type === undefined)
            return;
        type = checker.getApparentType(type);
        if (!tsutils_1.isTypeFlagSet(type, ts.TypeFlags.StructuredType))
            return;
        var t = checker.getTypeAtLocation(method);
        var symbol = t.symbol && type.getProperties().find(function (s) { return s.escapedName === t.symbol.escapedName; });
        return symbol !== undefined
            ? checker.getTypeOfSymbolAtLocation(symbol, method.name)
            : isNumericPropertyName(method.name) && type.getNumberIndexType() || type.getStringIndexType();
    }
    function signatureHasGenericOrTypePredicateReturn(signature) {
        if (signature.declaration.type !== undefined && tsutils_1.isTypePredicateNode(signature.declaration.type))
            return true;
        var original = checker.getSignatureFromDeclaration(signature.declaration);
        return original !== undefined && tsutils_1.isTypeParameter(original.getReturnType());
    }
    function removeOptionalityFromType(type) {
        if (!containsTypeWithFlag(type, ts.TypeFlags.Undefined))
            return type;
        var allowsNull = containsTypeWithFlag(type, ts.TypeFlags.Null);
        type = checker.getNonNullableType(type);
        return allowsNull ? checker.getNullableType(type, ts.TypeFlags.Null) : type;
    }
    function compareParameterTypes(context, declared, optional) {
        if (optional)
            declared = removeOptionalityFromType(declared);
        return typesAreEqual(declared, context) ||
            optional && typesAreEqual(checker.getNullableType(declared, ts.TypeFlags.Undefined), context);
    }
    function isNumericPropertyName(name) {
        var str = tsutils_1.getPropertyName(name);
        if (str !== undefined)
            return tsutils_1.isValidNumericLiteral(str) && String(+str) === str;
        return isAssignableToNumber(checker.getTypeAtLocation(name.expression));
    }
    function isAssignableToNumber(type) {
        var typeParametersSeen;
        return (function check(t) {
            if (tsutils_1.isTypeParameter(t) && t.symbol !== undefined && t.symbol.declarations !== undefined) {
                if (typeParametersSeen === undefined) {
                    typeParametersSeen = new Set([t]);
                }
                else if (!typeParametersSeen.has(t)) {
                    typeParametersSeen.add(t);
                }
                else {
                    return false;
                }
                var declaration = t.symbol.declarations[0];
                if (declaration.constraint === undefined)
                    return true;
                return check(checker.getTypeFromTypeNode(declaration.constraint));
            }
            if (tsutils_1.isUnionType(t))
                return t.types.every(check);
            if (tsutils_1.isIntersectionType(t))
                return t.types.some(check);
            return tsutils_1.isTypeFlagSet(t, ts.TypeFlags.NumberLike | ts.TypeFlags.Any);
        })(type);
    }
    function getMatchingSignature(type, parameters) {
        var minArguments = getMinArguments(parameters);
        var signatures = getSignaturesOfType(type).filter(function (s) { return getNumParameters(s.declaration.parameters) >= minArguments; });
        switch (signatures.length) {
            case 0:
                return;
            case 1:
                return [signatures[0], true];
            default:
                var str = checker.signatureToString(signatures[0]);
                var withoutReturn = removeSignatureReturn(str);
                var returnUsable = true;
                for (var i = 1; i < signatures.length; ++i) {
                    var sig = checker.signatureToString(signatures[i]);
                    if (str !== sig) {
                        if (withoutReturn !== removeSignatureReturn(sig))
                            return;
                        returnUsable = false;
                    }
                }
                return [signatures[0], returnUsable];
        }
    }
}
function removeSignatureReturn(str) {
    var open = 1;
    var i = 1;
    for (; open !== 0; ++i) {
        if (str[i] === '(') {
            ++open;
        }
        else if (str[i] === ')') {
            --open;
        }
    }
    return str.substr(0, i + 1);
}
function getSignaturesOfType(type) {
    if (tsutils_1.isUnionType(type)) {
        var signatures = [];
        for (var _i = 0, _a = type.types; _i < _a.length; _i++) {
            var t = _a[_i];
            signatures.push.apply(signatures, getSignaturesOfType(t));
        }
        return signatures;
    }
    if (tsutils_1.isIntersectionType(type)) {
        var signatures = void 0;
        for (var _b = 0, _c = type.types; _b < _c.length; _b++) {
            var t = _c[_b];
            var sig = getSignaturesOfType(t);
            if (sig.length !== 0) {
                if (signatures !== undefined)
                    return [];
                signatures = sig;
            }
        }
        return signatures === undefined ? [] : signatures;
    }
    return type.getCallSignatures();
}
function getNumParameters(parameters) {
    if (parameters.length === 0)
        return 0;
    if (parameters[parameters.length - 1].dotDotDotToken !== undefined)
        return Infinity;
    return parametersExceptThis(parameters).length;
}
function getMinArguments(parameters) {
    var minArguments = parameters.length;
    for (; minArguments > 0; --minArguments) {
        var parameter = parameters[minArguments - 1];
        if (parameter.questionToken === undefined && parameter.initializer === undefined && parameter.dotDotDotToken === undefined)
            break;
    }
    return minArguments;
}
function getIife(node) {
    if (node.parent.kind !== ts.SyntaxKind.ParenthesizedExpression)
        return;
    var prev = node.parent;
    var parent = prev.parent;
    while (parent.kind === ts.SyntaxKind.ParenthesizedExpression) {
        prev = parent;
        parent = parent.parent;
    }
    if (parent.kind === ts.SyntaxKind.CallExpression && parent.expression === prev)
        return parent;
}
function containsTypeWithFlag(type, flag) {
    return tsutils_1.isUnionType(type) ? type.types.some(function (t) { return tsutils_1.isTypeFlagSet(t, flag); }) : tsutils_1.isTypeFlagSet(type, flag);
}
function parametersExceptThis(parameters) {
    return parameters.length !== 0 && tsutils_1.isThisParameter(parameters[0]) ? parameters.slice(1) : parameters;
}
function functionHasTypeDeclarations(func) {
    return func.type !== undefined || parametersExceptThis(func.parameters).some(function (p) { return p.type !== undefined; });
}
//# sourceMappingURL=data:application/json;base64,